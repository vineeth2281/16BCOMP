<tokens>
<keyword> class </keyword>
<identifier> Image </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> bitmapHeight </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> bitmapLength </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> bitmap </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> uncompressed </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> dataLength </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> data </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> pushIndex </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> deltaXOffset </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> deltaYOffset </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> render </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> renderX </identifier>
<symbol> , </symbol>
<identifier> renderY </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> renderI </identifier>
<symbol> , </symbol>
<identifier> renderJ </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> renderPtr </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Image </identifier>
<identifier> newBitmap </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmapWidth </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapHeight </identifier>
<symbol> = </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapLength </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> * </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> bitmapLength </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> render </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> constructor </keyword>
<identifier> Image </identifier>
<identifier> newDelta </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> xOffset </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> yOffset </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> deltaXOffset </identifier>
<symbol> = </symbol>
<identifier> xOffset </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> deltaYOffset </identifier>
<symbol> = </symbol>
<identifier> yOffset </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapWidth </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapHeight </identifier>
<symbol> = </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapLength </identifier>
<symbol> = </symbol>
<identifier> size </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> bitmapLength </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> render </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> constructor </keyword>
<identifier> Image </identifier>
<identifier> newRender </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> render </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> resetRender </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapWidth </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapHeight </identifier>
<symbol> = </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapLength </identifier>
<symbol> = </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> bitmapLength </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> constructor </keyword>
<identifier> Image </identifier>
<identifier> newCompressed </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> height </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmapWidth </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapHeight </identifier>
<symbol> = </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapLength </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> * </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> bitmapLength </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dataLength </identifier>
<symbol> = </symbol>
<identifier> length </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> data </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> length </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> render </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> disposeCompressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> bitmap </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> disposeCompressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dataLength </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> data </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> dataLength </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> Array </identifier>
<identifier> getBitmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> bitmap </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLength </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> bitmapLength </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getWidth </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getHeight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> bitmapHeight </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> Array </identifier>
<identifier> getData </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> data </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getDataLength </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> dataLength </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> isRender </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> render </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> resetRender </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> renderX </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderY </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderI </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderJ </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderPtr </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> + </symbol>
<identifier> renderX </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> renderY </identifier>
<symbol> * </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> push </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> b </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> c </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> d </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> e </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> f </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> g </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> k </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> l </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> m </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> o </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> p </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> remain </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> remain </identifier>
<symbol> = </symbol>
<identifier> bitmapLength </identifier>
<symbol> - </symbol>
<identifier> pushIndex </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> d </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> e </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> f </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> g </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> k </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> l </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> n </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> o </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> p </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> pushIndex </identifier>
<symbol> = </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> d </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> e </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> f </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> g </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> k </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> l </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> n </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> remain </identifier>
<symbol> &gt; </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> pushIndex </identifier>
<symbol> + </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> o </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> pushIndex </identifier>
<symbol> = </symbol>
<identifier> bitmapLength </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> render </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> pushRender </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> pushIndex </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> RAM </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bitmapOffset </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> * </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapHeight </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> + </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawVScale </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> RAM </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bitmapOffset </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> err </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> intPart </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> fractPart </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> offsetStep </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> height </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> * </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> intPart </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> bitmapHeight </identifier>
<symbol> / </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fractPart </identifier>
<symbol> = </symbol>
<identifier> MathsToo </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> bitmapHeight </identifier>
<symbol> , </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> offsetStep </identifier>
<symbol> = </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> height </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> height </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> bitmapHeight </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> offsetStep </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> offsetStep </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> err </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> intPart </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> err </identifier>
<symbol> = </symbol>
<identifier> err </identifier>
<symbol> + </symbol>
<identifier> fractPart </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> err </identifier>
<symbol> &gt; </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> err </identifier>
<symbol> = </symbol>
<identifier> err </identifier>
<symbol> - </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> offsetStep </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> + </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawColVScale </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> col </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> RAM </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bitmapOffset </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> err </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> intPart </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> fractPart </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> offsetStep </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> height </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> * </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> intPart </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> bitmapHeight </identifier>
<symbol> / </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fractPart </identifier>
<symbol> = </symbol>
<identifier> MathsToo </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> bitmapHeight </identifier>
<symbol> , </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> offsetStep </identifier>
<symbol> = </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> height </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> height </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> bitmapHeight </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> offsetStep </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> offsetStep </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> col </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> err </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> bitmapOffset </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> intPart </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> err </identifier>
<symbol> = </symbol>
<identifier> err </identifier>
<symbol> + </symbol>
<identifier> fractPart </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> err </identifier>
<symbol> &gt; </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> err </identifier>
<symbol> = </symbol>
<identifier> err </identifier>
<symbol> - </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<identifier> offsetStep </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> + </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawDelta </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> RAM </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bitmapOffset </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> wordMask </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> maskMask </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> maxMask </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> deltaXOffset </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> deltaYOffset </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> * </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> wordMask </identifier>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> maskMask </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> maxMask </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 32767 </integerConstant>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapHeight </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> wordMask </identifier>
<symbol> &amp; </symbol>
<identifier> maskMask </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> bitmapOffset </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> maskMask </identifier>
<symbol> = </symbol>
<identifier> maxMask </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> wordMask </identifier>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> bitmapOffset </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> maskMask </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> maskMask </identifier>
<symbol> = </symbol>
<identifier> maskMask </identifier>
<symbol> + </symbol>
<identifier> maskMask </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> + </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> pushRender </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bitmapOffset </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> renderJ </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapHeight </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> renderI </identifier>
<symbol> &lt; </symbol>
<identifier> bitmapWidth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> renderPtr </identifier>
<symbol> [ </symbol>
<identifier> renderI </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> bitmap </identifier>
<symbol> [ </symbol>
<identifier> bitmapOffset </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitmapOffset </identifier>
<symbol> = </symbol>
<identifier> bitmapOffset </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderI </identifier>
<symbol> = </symbol>
<identifier> renderI </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> bitmapOffset </identifier>
<symbol> &gt; </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> renderPtr </identifier>
<symbol> = </symbol>
<identifier> renderPtr </identifier>
<symbol> + </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderI </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> renderJ </identifier>
<symbol> = </symbol>
<identifier> renderJ </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
