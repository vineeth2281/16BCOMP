// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
    //  T        a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

    Not(in = instruction[15], out = notT);

    // decide if and what gets loaded into A at this clock cycle
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = newAddress);
    Or(a = notT, b = instruction[5], out = loadARegister);
    ARegister(in = newAddress, load = loadARegister,  out = outARegister, out[0..14] = addressM);

    // decide whether ALU's input y = A or y = M using a
    Mux16(a = outARegister, b = inM, sel = instruction[12], out = AorM);

    //  decide if and what gets loaded into D at this clock cycle
    And(a = instruction[15], b = instruction[4], out = loadDRegister);
    DRegister(in = ALUout, load = loadDRegister, out = outDRegister);

    // carry out ALU computation instantaneously; x = D, y = A or M
    ALU(x = outDRegister, y = AorM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, out = outM, zr = ALUoutZero, ng = ALUoutNegative);

    // construct inc and load inputs for PC
    And(a = instruction[1], b = ALUoutZero, out = j2andZr);
    And(a = instruction[2], b = ALUoutNegative, out = j1andNg);
    Not(in = ALUoutZero, out = notZr);
    Not(in = ALUoutNegative, out = notNg);
    And(a = notZr, b = notNg, out = notZrAndNotNg);
    And(a = notZrAndNotNg, b = instruction[0], out = j3AndNotZrAndNotNg);
    And(a = instruction[2], b = instruction[1], out = j1Andj2);
    And(a = j1Andj2, b = instruction[0], out = j1Andj2Andj3);

    Or(a = j2andZr, b = j1andNg, out = j2andZrORj1andNg);
    Or(a = j1Andj2Andj3, b = j3AndNotZrAndNotNg, out = j1Andj2Andj3ORj3AndNotZrAndNotNg);
    Or(a = j2andZrORj1andNg, b = j1Andj2Andj3ORj3AndNotZrAndNotNg, out = j2andZrORj1andNgORj1Andj2Andj3ORj3AndNotZrAndNotNg);
    And(a = instruction[15], b = j2andZrORj1andNgORj1Andj2Andj3ORj3AndNotZrAndNotNg, out = loadPC);
    
    Not(in = loadPC, out = incPC);
    PC(in = outARegister, load = loadPC, inc = incPC, reset = reset, out[0..14] = pc);

    And(a = instruction[15], b = instruction[3], out = writeM);



}